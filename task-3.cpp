/**
 * @brief Task 3
 *
  На языке С/С++, написать функцию, которая быстрее всего (по процессорным тикам) отсортирует данный ей массив чисел.

  Массив может быть любого размера со случайным порядком чисел (в том числе и отсортированным).

  Объяснить почему вы считаете, что функция соответствует заданным критериям.
 * 
*/

//
// Я предположу, что написание своей функции сортировки будет не самым оптимальным решением
// В STL имеется прекрасная функция std::sort которая лучше всего справится с этой задачей
// 
// Начиная с с++ 17 в стандартных алгоритмах STL используется механизм распараллеливания
// "ExecutionPolicy" 
// Я провел бенчмарк и на моем intel i5 12400f следующие результаты:
// 
// количество элементов 100`000`000
// std::sort                            8`453 сек
// std::sort c std::execution::par      2`354 сек
//
//

// Однако если вопрос именно о числах (+скажем, что нам заранее известно множество, например, целые числа)
// я могу предложить решение которое жертвует памятью в угоду производительности
// это сортировка подсчетом

void countSort(std::vector<uint32_t>& arr)
{
    if (arr.is_empty())
        return;

    const auto max_v = *std::max_element(std::cbegin(arr), std::cend(arr));
    const auto min_v = *std::min_element(std::cbegin(arr), std::cend(arr));

    std::vector<uint32_t> temp(max_v - min_v + 1, 0);

    std::for_each(std::cbegin(arr), std::cend(arr), [&temp, min_v](auto v) mutable {
        ++temp[v - min_v];
    });

    auto arr_iter = arr.begin();

    for (size_t it = 0; it < temp.size(); ++it)
    {
        for (size_t k = 0; k < temp[it]; ++k)
        {
            *arr_iter++ = it + min_v;
        }
    }
}

