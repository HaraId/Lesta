/**
 * @brief Task 1
 * 

На языке С/С++, написать алгоритм (функцию) определения четности целого числа, который будет аналогичен нижеприведенному по функциональности, но отличен по своей сути.

Объяснить плюсы и минусы обеих реализаций.

C/C++ example:

bool isEven(int value){return value%2==0;}

 * 
 */


// Предложенная реализация 
// Плюсы: простая, понятная, не вызывает вопросов

//bool isEven(int value){return value%2==0;}



// Предложения по улучшению (по этапно):

// 1) можем вместо использования модуля использовать побитовое умножение
// и посмотреть чему равен последний бит
bool isEven_1(int num) {
    return (num & 1) == 0;
}
// На сколько мне известно, компилятор сам может делать такую оптимизацию
// 


// 2) Сделаем строгую гарантию исключений
bool isEven_2(int num) noexcept {
    return (num & 1) == 0;
}

// 3) Строго говоря, целочисленно число - это любое целое
// а значит, хотелось бы принимать не только int (4 байта) но и какой-то int64_t
// Мы можем сделать одну общую функцию, которая будет принимать сразу максимальное число
bool isEven_3(std::size_t num) noexcept {
    return (num & 1) == 0;
}

// 4) Пару мыслей про шаблонынй тип
template <class T> 
bool isEven_4(T num) noexcept {
    return (num & 1) == 0;
}
// мы получили слишком "универсальную" функцию
// нам придется ее ограничить при помощи:
// a) SFINAE
// b) написать концепт

// Добавление шаблонов без концептов (а это все что меньше с++20)
// ведет к усложнению кодовой базы.
// Я за SFINAE, но это слишком долго и сложно, плюс всегда можно допустить ошибку.

// Поэтому могу предложить оставить данную функцию:
bool isEven_3(std::size_t num) noexcept {
    return (num & 1) == 0;
}